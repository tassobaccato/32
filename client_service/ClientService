HW
Client_Server
1) Прочитать про клиент-серверную архитектуру, https://www.youtube.com/watch?v=wLHuviTWnuY 
	клиент передаёт данные на сервер -> сервер запрашивает данные в БД -> БД 
	возвращает инфу серверу -> сервер передаёт её клиенту
		Зачем нужен клиент (web или десктоп):
	Тут все просто — с клиентом работает пользователь. Он нужен, чтобы превратить байтики 
	программного кода в красивую и понятную картинку. Пользователь — не программист, он 
	не понимает язык программирования или sql. Он понимает формочки и кнопочки. Их в 
	клиенте и рисуем.
		Зачем нужен сервер:
	Он мощнее
	Клиентов может быть много. В примере с банком у нас может быть по 10 отделений в 10 
	городах России, а в каждом отделении по 10 операционисток.
	А мы ведь хотим, чтобы приложение работало быстро. Чтобы оно не тупило и не зависало, 
	нервируя операциониста и заставляя клиента ждать. Значит, машина нужна мощная. Но 
	если делать мощным каждый компьютер операциониста, денег придется вложить очень много!
	Поэтому мы выносим всю основную логику на сервер. И вот его уже делаем мощным! А 
	клиентские машины могут быть дешевыми, потому что на них остается лишь логика в стиле 
	«запросить информацию и красиво отрисовать».
		Нет дублирования кода
	Если бы у нас были только клиентские машины, на каждой из них хранился бы одинаковый 
	код по обработке логики, лежала вся база данных, все справочники террористов и прочая. 
	Но так как сервер и БД вынесены в отдельные звенья, с клиентской машины освобождается 
	куча места… И кода.
		Так безопаснее
	На сервере и в базе хранится информация, недоступная простому операционисту. Это:
			Персональные данные клиентов
			Сведения о его финансах
			Черные списки банка
			...
	Зачем показывать эту информацию всем и каждому? Операционистка видит только свой 
	интерфейс. Вбила ФИО — получила ответ, дать кредит или нет. Всё. Ей больше ничего 
	не нужно.
	Есть операционисты, готовые за денюшку слить информацию о клиентах. Есть нечистые 
	на руку люди, готовые невзначай заглянуть через плечо. А, может, клиент сам такой 
	человек. Представляете, отпихивает Вася хрупкую Катю, садится за ее компьютер, и 
	переводит себе на счет миллионы, пока его не повяжет охрана.
	Не надо дублировать код, ведь вся основная логика вынесена на более мощный сервер.
		Зачем нужна база
	При чем же тут БД? Вот у нас есть наш сервер, пусть он и хранит всю информацию. 
	Бывает и так, иногда база просто не нужна и у нас остается двузвенная архитектура 
	клиент-сервер.
	В таком случае все данных сервер хранит в памяти. Вот только если сервер упадет, 
	или просто перезагрузится — вся информация будет потеряна. Все, что было в памяти, 
	стирается при выключении системы.
		БД (база данных) — отдельный программный продукт, который позволяет:
	быстро делать выборки информации;
	сохранять информацию даже при рестарте системы.
	То есть если вдруг пропадет сеть, база зависнет, машина с базой перезагрузится, 
	или случится что-то другое, наши изменения не пропадут. Это называется персистентность.
	Достигается она за счет транзакций, которые откатываются, когда что-то идет не так.
	Да, базы может не быть. Но когда она есть, мы уверены в сохранности данных и легко 
	можем по ним поискать.

2) Что ткое HTTP и HTTPS
	протоколы, которые обеспечивают обмен данными в интернете
	HyperText Transfer Protocol
	HyperText Transfer Protocol Secure - протокол защищенный SSL-сертификатом(Цифровой 
		документ, который обеспечивает безопасное соединение и обмен данными между 
		сайтом и пользователями путём шифрования передаваемой информации. SSL 
		подтверждает подлинность веб-сайта и исключает возможность неправомерного 
		использования вводимых данных).
	Протокол HTTP от HTTPS отличается тем, что:
		- протокол HTTP не обеспечивает защиту передаваемых данных — любая личная 
		информация может быть перехвачена злоумышленниками;
		- HTTP работает по порту 80, а HTTPS ― по порту 443;
		- сайты с этими протоколами по-разному отображаются в поисковых системах: 
		так как HTTP не шифрует данные, то поисковые системы считают этот протокол 
		небезопасным и оповещают об этом пользователя — в поисковой строке 
		высвечивается сообщение "Не защищено" или появляется восклицательный знак в 
		красном треугольнике.
	
3) HTTP методы:
	GET - запрашивает представление ресурса. Запросы с использованием этого метода могут 
		только извлекать данные.
	HEAD - запрашивает ресурс так же, как и метод GET, но без тела ответа.
	POST - используется для отправки сущностей к определённому ресурсу. Часто вызывает 
		изменение состояния или какие-то побочные эффекты на сервере.
	PUT - заменяет все текущие представления ресурса данными запроса.
	DELETE - удаляет указанный ресурс.
	CONNECT - устанавливает "туннель" к серверу, определённому по ресурсу.
	OPTIONS - используется для описания параметров соединения с ресурсом.
	TRACE - выполняет вызов возвращаемого тестового сообщения с ресурса
	PATCH - используется для частичного изменения ресурса.
		Безопасный метод
	Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, 
	безопасный метод проводит операции "только чтение" (read-only). Несколько следующих 
	методов HTTP безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются также 
	идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или 
	DELETE.
		Идемпотентный метод
	Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один 
	или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
	Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов 
	(side-effects), кроме сбора статистики или подобных операций. Корректно реализованные 
	методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные 
	методы являются идемпотентными.
		Кешируемые методы
	Кешируемые ответы - это HTTP-ответы, которые могут быть закешированы, то есть 
	сохранены для дальнейшего восстановления и использования позже, тем самым снижая 
	число запросов к серверу. Не все HTTP-ответы могут быть закешированы. 
	Специальный заголовок Cache-Control в ответе может предотвратить кеширование.

4) HTTP статус коды сервера:
	Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP 
	запрос. Коды сгруппированы в 5 классов:
		Информационные 100 - 199
		Успешные 200 - 299
		Перенаправления 300 - 399
		Клиентские ошибки 400 - 499
		Серверные ошибки 500 - 599
	https://developer.mozilla.org/ru/docs/Web/HTTP/Status - список всех кодов и их значения

5) Что такое ядро браузера:
	Браузер = оболочка + ядро
	Среди них относительно больше типов оболочек и меньше ядер. Оболочка относится к 
	оболочке браузера: например, меню, панели инструментов и т. Д. Он в основном 
	предназначен для работы с пользовательским интерфейсом, настройки параметров и так 
	далее. Он вызывает ядро ​​для реализации различных функций. 
	Ядро - это ядро ​​браузера. 
	Ядро - это программа или модуль, который отображает контент на основе языка разметки.
	Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или 
	движок рендеринга) и движок JS. Он отвечает за получение содержимого веб-страницы 
	(HTML, XML, изображения и т. Д.), Организацию информации (например, добавление CSS 
	и т. Д.) И расчет режима отображения веб-страницы, а затем вывод ее на монитор или 
	принтер. Разница в ядре браузера будет по-разному интерпретировать синтаксис 
	веб-страницы, поэтому эффект рендеринга будет другим. 

6) Какие браузеры какие ядра используют:
	Разработка прекращена:
		Trident — проприетарный движок Microsoft Internet Explorer.
		EdgeHTML — движок от компании Microsoft для её браузера Microsoft Edge. 
			Является ответвлением Trident. 6 декабря 2018 года объявлено об отказе 
			MS от Trident/EdgeHTML в пользу Blink.

		Presto — проприетарный движок, разработанный Opera Software. 13 февраля 2013 
			года было объявлено об отказе Opera от Presto в пользу Blink.
	Поддерживаемые
		Blink — движок браузера Chromium, браузера Google Chrome с 28 версии, Microsoft 
			Edge с 79 версии, Opera c 15 версии и Vivaldi. Он является ответвлением 
			WebKit.
		Gecko — открытый движок проекта Mozilla; используется в большом числе программ, 
			основанных на коде Mozilla (браузере Firefox, почтовом клиенте 
			Thunderbird, наборе программ SeaMonkey).
		WebKit — движок для браузера Apple Safari, включенного в операционную систему 
			Mac OS X, и браузера Google Chrome (до 2013 года). Встроен в библиотеку 
			Qt (Начиная с Qt 5.6 признан устаревшим).
		KHTML — разработан в рамках проекта KDE, используется в браузере Konqueror и 
			послужил основой для WebKit.
	IE (до 9) = Trident + Jscript
	IE (после 9) = трезубец + чакра
	360=Trident+Blink 
	Sogou = Trident + WebKit
	Firefox=Gecko+JagerMonkey 
	Safari=webkit=webcore+jscore 
	Chrome=Blink+v8 
	Opera=Blink+v8
	
7) Что такое API:
	- одна система общается с другой по протоколу передачи данных(интеграция между двумя 
		разными системами Remote API)
	API (Application programming interface) — это контракт, который предоставляет программа.
	«Ко мне можно обращаться так и так, я обязуюсь делать то и это».(в программировании 
	контракт — это и есть интерфейс)
	API — набор функций:
		Соответственно, API отвечает на вопрос “Как ко мне, к моей системе можно 
		обратиться?”, и включает в себя:
		- саму операцию, которую мы можем выполнить,
		- данные, которые поступают на вход,
		- данные, которые оказываются на выходе (контент данных или сообщение об ошибке).
	API включает: 
		- операция
		- данные на входе
		- данные на выходе
	
8) Что такое ендпоинты:
	Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который 
	соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это 
	адрес, на который отправляются сообщения.
	Эндпоинты работают вместе с методами API. Это определенные URL-адреса, которые 
	приложение использует для связи со сторонними службами и своими пользователями. URL — 
	это роут, который может обрабатывать разные методы запроса. Каждый тип запроса — это 
	отдельный эндпоинт.

9) URL (URI, URL, URN)
	URI (uniform resource identifier) identifies a resource (text document, image file, etc)	
	URL (uniform resource locator) is a subset of the URIs that include a network location
	URN (uniform resource name) is a subset of URIs that include a name within a given space, 
		but no location
	URI (унифицированный идентификатор ресурса) идентифицирует ресурс (текстовый документ, файл изображения и т. д.).
	URL-адрес (унифицированный указатель ресурса) — это подмножество URI, включающее сетевое расположение.
	URN (унифицированное имя ресурса) — это подмножество URI, которые включают имя в заданном пространстве, но не местоположение.

10) Идемпотентные HTTP методы:
	Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один 
	или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
	Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов 
	(side-effects), кроме сбора статистики или подобных операций. Корректно реализованные 
	методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные 
	методы являются идемпотентными.
	
11) Безопасные HTTP методы:
	Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, 
	безопасный метод проводит операции "только чтение" (read-only). Несколько следующих 
	методов HTTP безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются также 
	идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или 
	DELETE.

12) Идентификация, Аутентификация, Авторизация:
	Идентификация — процесс распознавания пользователя по его идентификатору.
	Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает.
	Авторизация — предоставление определённых прав.

13) Что такое IP:
	IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через 
	интернет или локальную сеть.
	IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети.
	По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в 
	сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для 
	связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и 
	являются важным компонентом работы интернета.

14) Что такое октаты в DNS:
	DNS — это технология, которая позволяет браузеру вроде Firefox, Chrome или Edge найти 
	запрошенный пользователем сайт по его имени.

15) Что такое порт, сколько портов у Linux сервера:
	С ними компьютер не путает, что и куда отправлять
	Физический порт — это разъём на компьютере или в ноутбуке, куда можно подключить флешку, сетевой 
	кабель, принтер, наушники и что угодно ещё. Физический порт обменивается электричеством с чем-то,
	что в этот порт вставлено. В электричестве закодированы какие-то данные.
	Программный порт — это «виртуальный разъём» в программе, через которую она может обмениваться 
	данными с системой и другими программами. У него нет физического устройства, а есть только число 
	от 0 до 65 535 — оно называется адресом порта.
	Порт (англ. port) — целое неотрицательное число, записываемое в заголовках протоколов 
	транспортного уровня сетевой модели OSI (TCP, UDP, SCTP, DCCP)
	- Теоретически количество внешних портов для одной машины может достигать 65535, но фактическое 
	количество подключений, которые могут быть установлены с внешним миром, по умолчанию составляет 
	только 28232.

16) Уровни OSI:
	Open System Interconnection — взаимодействие сетевых протоколов. Благодаря ей, сетевые устройства 
	могут между собой коммуницировать
	Модель OSI:
		7 - прикладной уровень
		6 - уровень представления
		5 - сеансовый уровень
		4 - транспортный уровень
		3 - сетевой уровень
		2 - канальный уровень
		1 - физический уровень
	- Физический уровень определяет физические характеристики линий связи, способы передачи бит через 
	линии связи, соединяющие сетевые устройства. Этот уровень способствует скорости передачи данных,
	синхронизации.
	- Канальный уровень определяет правила использования для передачи данных узлам, расположенных в 
	том же сегменте локальной сети. Способствует обнаружению появившихся на физическом уровне 
	дефектов, ошибок и их устранению. На данном уровне работает адресация (MAC, LLS), но отсутствует 
	маршрутизация — это работа вышестоящего уровня. Канальный уровень использует протоколы Ethernet.
	- Сетевой уровень определяет пути передачи данных и содействует работе маршрутизатора.
	- Транспортный уровень определяет способ передачи данных, реализует контроль передвижения и 
	качество доставки, что способствует использованию протоколов TCP (изменяет скорости передачи 
	данных при необходимости), UDP и т. п.
	- Сеансовый уровень способствует непрерывному сеансу связи, управляет им, дает возможность 
	приложениям коммуницировать между собой длительный промежуток времени. PPTP, L2TP — эти протоколы 
	используются на данном уровне.
	- Уровень представления определяет трансформацию протоколов и кодирование/декодирование данных. 
	MPEG, JPEG и т. п.
	- Прикладной уровень предоставляет взаимосвязь сети и пользователя. Этот уровень способствует 
	работе всех приложений, протоколов HTTP, POP, SMTP и т.п. Он дает возможность получать 
	уведомления по электронной почте или html-кода.

17) Хедеры http запросов:
	Заголовки – это специальные параметры, которые несут определенную служебную информацию о соединении по HTTP. Некоторые заголовки имеют лишь информационный характер для пользователя или для компьютера, другие передают определенные команды, исходя из которых, сервер или клиент будет выполнять какие-то действия.
	В зависимости от того, где эти заголовки могут находиться, они разделяются на:
	General Headers (Основные заголовки) — должны быть и в запросах и в ответах клиента и сервера.
	Request Headers (Заголовки запроса) — используются только в запросах клиента.
	Response Headers (Заголовки ответа) — используются только в ответах сервера.
	Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.
